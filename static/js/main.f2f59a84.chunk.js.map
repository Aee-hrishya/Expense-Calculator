{"version":3,"sources":["components/Expenses/ExpenseDate.js","components/UI/Card.js","components/Expenses/ExpenseItems.js","components/Expenses/ExpensesFilter.js","components/Expenses/Expenses.js","components/NewExpense/ExpenseForm.js","components/NewExpense/NewExpense.js","App.js","index.js"],"names":["ExpenseDate","props","month","date","toLocaleString","year","getFullYear","day","className","Card","classes","children","ExpenseItem","title","amount","ExpensesFilter","value","selected","onChange","e","onChangeFilter","target","Expenses","useState","filteredYear","setFilteredYear","filteredExpenses","items","filter","expense","toString","selectedYear","length","map","id","ExpenseForm","enteredTitle","setEnteredTitle","enteredAmount","setEnteredAmount","enteredDate","setEnteredDate","onSubmit","expenseData","Date","onSaveExpenseData","preventDefault","type","min","step","max","NewExpense","enteredExpenseData","Math","random","onAddExpense","DUMMY_EXPENSES","App","expenses","setExpenses","prevExpenses","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f2f59a84.chunk.js","sourcesContent":["import \"./ExpenseDate.css\";\r\n\r\nconst ExpenseDate = (props) => {\r\n\r\n    const month = props.date.toLocaleString(\"en-US\", { month: \"long\" });\r\n    const year = props.date.getFullYear();\r\n    const day = props.date.toLocaleString(\"en-US\", { day: \"2-digit\" });\r\n\r\n    return (\r\n        <div className=\"expense-date\">\r\n            <div className=\"expense-date__month\">{month}</div>\r\n            <div className=\"expense-date__year\">{year}</div>\r\n            <div className=\"expense-date__day\">{day}</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ExpenseDate;","import \"./Card.css\";\r\n\r\nconst Card = (props) => {\r\n\r\n    const classes = \"card \" + props.className; //Here we tweaked our classname a little bit as we wanted to also add the styling that the other components have so we concatenated it to our own class and made a custom class so that we can use it.\r\n\r\n    return(\r\n        <div className={classes}>{props.children}</div> // props.children is a special prop(It allows you to create wrapper components) that react has and it is used to create wrapper components and now we can use this component to to wrap some JSX code inside it.Basically props.children is everything that the component has inside its opening and closing tags, so we can use them without repeating ourselves here in this case we just apply common styles to them\r\n    );\r\n}\r\n\r\nexport default Card;","import ExpenseDate from \"./ExpenseDate\";\r\nimport Card from \"../UI/Card\";\r\nimport \"./ExpenseItem.css\"; //Importing the css file\r\n\r\n\r\n//Now we pass props here as parameter so that we can access the key value pairs inside it and make use of them\r\nconst ExpenseItem = (props) => {\r\n\r\n    return (\r\n\r\n        <Card className=\"expense-item\"> {/* here Card is the custom component wrapper which is used to wrap the other components so that we can apply styles to them which are repetitive for some of them */}\r\n            {/* We can add data dynamically by using the curly braces */}\r\n            {/* Now we can separate this date divs and create a separate component for this and then use them here, so we created the ExpenseDate component */}\r\n            <ExpenseDate date={props.date} /> {/* we can do this when the component we are using has no text between it */}\r\n            <div className=\"expense-item__description\">\r\n                <h2>{props.title}</h2>\r\n                <div className=\"expense-item__price\">{props.amount}</div>\r\n            </div>\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport default ExpenseItem; //We are exporting this so that we can use it in different files and not just this file","import './ExpensesFilter.css';\r\n\r\nconst ExpensesFilter = (props) => {\r\n\r\n    const dropDownHandler = (e) => {\r\n\r\n        props.onChangeFilter(e.target.value);\r\n    };\r\n\r\n    return (\r\n        <div className='expenses-filter'>\r\n            <div className='expenses-filter__control'>\r\n                <label>Filter by year</label>\r\n                <select value={props.selected} onChange={dropDownHandler}>\r\n                    <option value=\"2022\">2022</option>\r\n                    <option value=\"2021\">2021</option>\r\n                    <option value=\"2020\">2020</option>\r\n                    <option value=\"2019\">2019</option>\r\n                </select>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ExpensesFilter;","import { useState } from \"react\";\r\nimport \"./Expenses.css\";\r\nimport ExpenseItem from \"./ExpenseItems\";\r\nimport Card from \"../UI/Card\";\r\nimport ExpensesFilter from \"./ExpensesFilter\";\r\n\r\n\r\nconst Expenses = (props) => {\r\n\r\n    const [filteredYear, setFilteredYear] = useState(\"2022\");\r\n    const filterChangeHandler = (selectedYear) => {\r\n\r\n        setFilteredYear(selectedYear);\r\n\r\n    };\r\n\r\n    //Here we added the filter on the year so that only those expenses will be shown which were done on that year and others will be restricted we used the inbuilt filter method of arrays for this\r\n    const filteredExpenses = props.items.filter(expense => {\r\n        return expense.date.getFullYear().toString() === filteredYear;\r\n    });\r\n\r\n    return (\r\n\r\n        <Card className=\"expenses\">\r\n            <ExpensesFilter selected={filteredYear} onChangeFilter={filterChangeHandler} />\r\n\r\n            {/*Below we dynamically added the items from the expense array, so that whenever we add something to the expense array it gets allocated automatically to the ExpenseItem component. We do this using the map method of the array and we do this so that we dont have to manually assign for every expense added on the web app, below we used the filteredExpenses to apply map as we want to map the filtered expenses*/}\r\n            {/*Below we also added a conditional statement to check whether the expenses for the selected year are present or not and then we added what to do if not present, there are various ways to add conditionals this is one of them, also we use ternary operators as if statements and loops are not supported in JSX code */}\r\n            {filteredExpenses.length === 0 ? <p>No expense here</p> : filteredExpenses.map((expense) => {\r\n\r\n                return <ExpenseItem\r\n                    key={expense.id} /* We use the key(is a built in prop) prop to help react understand that each ExpenseItem is unique and has an ID so that it does not return bugs, we can use the key prop in any custom component or JSX element (ALWAYS ADD THE KEY PROP WHEN MAPPING ELEMENTS SO THAT WE DONT GET BUGS) */\r\n                    title={expense.title}\r\n                    amount={expense.amount}\r\n                    date={expense.date}\r\n                />\r\n            })}\r\n\r\n        </Card>\r\n\r\n    );\r\n}\r\n\r\nexport default Expenses;","import {useState} from \"react\";\r\nimport \"./ExpenseForm.css\";\r\n\r\n//Creating the ExpenseForm component\r\nconst ExpenseForm = (props) => {\r\n\r\n    //We can call multiple useStates in an component\r\n    const [enteredTitle, setEnteredTitle] = useState(\"\");//Initially the useState is empty\r\n\r\n    const [enteredAmount, setEnteredAmount] = useState(\"\");\r\n\r\n    const [enteredDate, setEnteredDate] = useState(\"\");\r\n\r\n    //Now just like vanilla JS when we add the event listener, the function inside  it automatically gets the event(e) same thing happens in react\r\n    const titleChangeHandler = (e) => {\r\n        setEnteredTitle(e.target.value);\r\n    }\r\n\r\n    const amountChangeHandler = (e) => {\r\n        setEnteredAmount(e.target.value);\r\n    }\r\n\r\n    const dateChangeHandler = (e) => {\r\n        setEnteredDate(e.target.value);\r\n    }\r\n\r\n    //submitHandler function to handle the onSubmit function\r\n    const submitHandler = (e) => {\r\n\r\n        //Now we want to gather all the different states that we have created and add them to an object\r\n        const expenseData = {\r\n            title: enteredTitle,\r\n            amount:enteredAmount,\r\n            date: new Date(enteredDate) //creating a date object with the enteredDate\r\n\r\n        };\r\n\r\n        props.onSaveExpenseData(expenseData);//calling the onSaveExpenseData property here\r\n\r\n        //Clearing the input fields after we receive the form submission\r\n        setEnteredTitle(\"\");\r\n        setEnteredAmount(\"\");\r\n        setEnteredDate(\"\");\r\n\r\n        e.preventDefault();\r\n    };\r\n\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit={submitHandler}>\r\n                <div className=\"new-expense__controls\">\r\n                    <div className=\"new-expense__control\">\r\n                        <label>Title</label>\r\n                        <input type=\"text\" value={enteredTitle} onChange={titleChangeHandler} /> {/*We use two way binding by settiing the value to entered value so that we can do some changes with it, two way binding is very useful whne working with form as it helps us to change the form inputs */}\r\n                    </div>\r\n                    <div className=\"new-expense__control\">\r\n                        <label>Amount</label>\r\n                        <input type=\"number\" value={enteredAmount} min=\"0.01\" step=\"0.01\" onChange={amountChangeHandler}/>\r\n                    </div>\r\n                    <div className=\"new-expense__control\">\r\n                        <label>Date</label>\r\n                        <input type=\"date\" value={enteredDate} min=\"2019-01-01\" max=\"2022-12-31\" onChange={dateChangeHandler} />\r\n                    </div>\r\n               </div>\r\n               <div className=\"new-expense__actions\">\r\n                   <button type=\"submit\">Add Expense</button>\r\n               </div>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ExpenseForm;","import \"./NewExpense.css\";\r\nimport ExpenseForm from \"./ExpenseForm\";\r\n\r\nconst NewExpense = (props) => {\r\n\r\n    const saveExpenseDataHandler = (enteredExpenseData) => {\r\n        const expenseData = {\r\n            ...enteredExpenseData, //Here we use the spread operator to pick individual key value pairs from the earlier object and add them to this new object.\r\n            id: Math.random().toString() //Adding a random id\r\n        };\r\n        \r\n        props.onAddExpense(expenseData);// Calling the onAddExpense function here so that we can use it to transfer data to parent component\r\n    };\r\n\r\n    return(\r\n        <div className=\"new-expense\">\r\n            <ExpenseForm onSaveExpenseData={saveExpenseDataHandler} /> {/*adding our custom prop onSaveExpenseData to get the data from the child component */}\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default NewExpense;","import { useState } from \"react\";\nimport Expenses from \"./components/Expenses/Expenses\";\nimport NewExpense from \"./components/NewExpense/NewExpense\";\n\n//Below we have an array expense of the different types of expenses\nconst DUMMY_EXPENSES = [\n  {\n    id: 'e1',\n    title: 'Toilet Paper',\n    amount: 94.12,\n    date: new Date(2020, 7, 14),\n  },\n\n  {\n    id: 'e2',\n    title: 'New TV',\n    amount: 799.49,\n    date: new Date(2021, 2, 12)\n  },\n\n  {\n    id: 'e3',\n    title: 'Car Insurance',\n    amount: 294.67,\n    date: new Date(2021, 2, 28),\n  },\n\n  {\n    id: 'e4',\n    title: 'New Desk (Wooden)',\n    amount: 450,\n    date: new Date(2021, 5, 12),\n  },\n];\n\nconst App = () => {\n\n\n  const [expenses, setExpenses] = useState(DUMMY_EXPENSES);//Passing the initial array DUMMY_EXPENSES as the intial state so that we can add items to it using the useState\n\n  const addExpenseHandler = expense => {\n\n    //Below we use the function inside the setExpenses as our new state is dependent on the previous state\n    setExpenses((prevExpenses) => {\n      return [expense, ...prevExpenses];\n    });\n\n  };\n\n  return (\n    <div>\n      <NewExpense onAddExpense={addExpenseHandler} />\n      {/* Below we have the expenses component which has other components inherited inside it*/}\n      <Expenses items={expenses} /> {/*Passing the expenses state as prop to the Expenses component */}\n\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}